---
import BaseLayout from '../../layouts/BaseLayout.astro';
import Button from '../../components/Button.astro';
import FormattedDate from '../../components/FormattedDate.astro';
// import PostPreview from '../../components/PostPreview.astro';
import Subscribe from '../../components/Subscribe.astro';
// import { sortItemsByDateDesc } from '../../utils/data-utils';
// import { slugify } from '../../utils/common-utils';
import PortableText from '../../components/PortableText.astro';

import type { SanityDocument } from '@sanity/client';
import { loadQuery } from '../../../studio/lib/load-query';

export async function getStaticPaths() {
    const { data: posts } = await loadQuery<SanityDocument[]>({
        query: `*[_type == "post"]`
    });

    return posts.map(({ slug }) => {
        return {
            params: {
                slug: slug.current
            }
        };
    });
}

const { params } = Astro;
const {
    data: post
}: {
    data: {
        slug: any;
        title: string;
        excerpt: string;
        image: { url: string };
        publishedAt: string;
        body: any;
    };
} = await loadQuery({
    query: `*[_type == "post" && slug.current == $slug][0]`,
    params
});
---

<BaseLayout
    title={post?.title ?? post.title}
    description={post?.excerpt ?? post?.excerpt}
    image={{ src: post?.image?.url, alt: post?.title }}
    pageType="article"
    showHeader={false}
>
    <article class="mb-16 sm:mb-24">
        <header class="mb-8">
            <h1 class="text-3xl leading-tight font-serif font-medium sm:text-5xl sm:leading-tight">{post?.title}</h1>
            <div class="mt-4 text-sm">
                <FormattedDate date={(post?.publishedAt && post.publishedAt) || ''} />
            </div>
            <div class="max-w-none prose prose-dante sm:prose-lg">
                <PortableText portableText={post?.body} />
            </div>
            <div class="mt-8 flex flex-wrap items-center gap-6 text-sm justify-between sm:mt-12 sm:text-base">
                <!-- {
                    tags?.length > 0 && (
                        <div class="flex flex-wrap gap-x-5 gap-y-1 text-sm">
                            {tags.map((tag) => (
                                <a
                                    class="text-main hover:underline"
                                    href={`/tags/${slugify(tag)}`}
                                >
                                    #{tag}
                                </a>
                            ))}
                        </div>
                    )
                } -->
                <Button
                    class="copy-url-button"
                    aria-label="Copy link"
                    data-url={post?.slug?.current}
                    data-tooltip-default="Copy link"
                    data-tooltip-success="Copied"
                    >Share</Button
                >
            </div>
        </header>
        <!-- {
            (prevPost || nextPost) && (
                <div class="my-16 sm:my-24">
                    <h2 class="mb-12 text-xl font-serif italic sm:mb-16 sm:text-2xl">Read Next</h2>
                    {nextPost && (
                        <PostPreview
                            post={nextPost}
                            class="mb-10 sm:mb-12"
                            headingLevel="h3"
                        />
                    )}
                    {prevPost && (
                        <PostPreview
                            post={prevPost}
                            class="mb-10 sm:mb-12"
                            headingLevel="h3"
                        />
                    )}
                </div>
            )
        } -->
        <Subscribe class="my-16 sm:my-24" />
    </article>

    <script>
        document.addEventListener('astro:page-load', () => {
            const copyUrlButton = document.querySelector('.copy-url-button') as HTMLButtonElement;
            copyUrlButton?.addEventListener('click', async () => {
                await copyUrl(copyUrlButton);
            });

            async function copyUrl(button: HTMLButtonElement) {
                let url = button.getAttribute('data-url') || '';
                let label = button.innerText;

                await navigator.clipboard.writeText(url);

                button.innerText = 'Copied';

                setTimeout(() => {
                    button.innerText = label;
                }, 2500);
            }
        });
    </script>
</BaseLayout>
